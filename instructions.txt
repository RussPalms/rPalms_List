Step by step instructions for creating a craigslist clone

1.  Download/Install VS code for our indegrated developement environment (IDE)

2.  Download/Install Anaconda so that we can create virtual environments

3.  Download/Install Git so that we can easily manage multiple versions of our project as 
    well as have a bash shell to easily execute our commands (especially if we are on a 
    Windows machine)

4.  Run Git Bash for easy configuration of our project.

5.  Create a directory for our project and cd into into it:
        mkdir django_project
        cd django_project

6.  Create a virtual Anaconda environment and give it the name of our project using:
        conda create --name rpalms_list python=3

7.  After creating the virtual environment we need to activate it using:
        conda activate rpalms_list

8.  We then need to install Django using either pip or conda, in this case we are using pip:
        pip install django

** a little side note for commandline shortcuts
** you can use the keybinding:
    CRTR + R
what this does is it lets you search for recently used commands that have been executed 
in the CLI

9.  After installing django we can then start to create a django project and give it a 
    name using:
        django-admin startproject rpalms_list
    What this does is it created the minimal neccesary code and file structer to 
    build our django app 

10. We then need to CD into our project:
        cd rpalms_list

11. After creating our django project we then need to start creating our app 
    directories and in this case we're naming it 'my_app' to do that we use:
        django-admin startapp my_app
    This creates the file structure for our app

12. We then are ready to start programming our app and to open up our IDE in our 
    current working directory we use:
        code .

13. Once we're in our IDE we need to chose our Python interpreter, in this case 
    VS Code prompts us to choose one as soon as it's opened up. We then choose the 
    'rpalms_list' conda environment that we created.

14. Let's first open a new integrated terminal in our IDE. This isn't neccesary, 
    you can use the Git Bash shell we we're using earlier, but this is just my preference.
    We can use the shortcut keybinding for that:
        CTRL + SHIFT + `
    The last character is a 'backtick' not an 'apostrophy'.

15. Initially the default CLI that is used is powershell. To avoid Operating System
    problems, we are going to continue using a bash shell. To access that 
    click the dropdown menu towards the top right of the terminal window and select
        New Git Bash
    We can then go on to execute commands in our bash shell.

14. This isn't a neccesary next step, but if you want to test to see if the initial
    django server runs correctly, execute:
        python manage.py runserver
    The manage.py file is one of the initial files that django creates when we first 
    create a new project. What this file does is it executes a local server
    and runs our app. It then gives us the url where we can test and see if it is working.

15. Let's create a new file in our root directory and name it 'templates':
        mkdir templates
    This is going house the html file that our app is going to display.

16. Right after we create our templates folder let's create the html file
    and name it 'base':
        touch templates/base.html
    
17. Let's then go into our base.html and create the initial structure for our webpage.

18. The inital html file we create won't render automatically, we need to create a view and 
    map our urls. 

19. Whenever we create a new app we want to install it in our settings.py file by going to the 
    INSTALLED_APPS list and appending my_app to the end of it.

20. While still in our settings.py file we should also define the location of our template
    directory.

21. Let's then define our STATIC_URL in the same file we are currently in. This is something
    we will be using later.

22. Go you the views.py file and create a home function that renders our html.

23. Create another urls.py file in the my_app directory.

24. Go to that urls.py file and define urlpatterns which will route your view to the homepage.

25. At this point we should create our initial migrations and to do that we run:
        python manage.py makemigrations

26. Then migrate using:
        python manage.py migrate

27. From here we can create a superuser. To do that we do:
        python manage.py createsuperuser
    This will create an admin which will take us to the backend of our app.

28. To view our admin we first run our server again, then at the end of the url, we enter:
        /admin
    We can then access the database for our app.

29. Let's then go to the models.py file and implement the search functionality for our app.

30. Go to admin.py and register  the search model.

31. To render our html we need to define the urlpatterns in our rpalms_list/url.py file.

32. The next thing we want to do is start to create our front-end stuff. To begin, let's create
    a static folder in our root directory.
        mkdir static

33. Let's then create a css folder in our static folder:
        mkdir static/css

34. After that create a new css file and call it 'style'
        touch static/css/style.css

34. Then let's add a new folder in our templates directory called my_app:
        mkdir templates/my_app

35. Then add a new html file in that my_app folder and call it 'index':
        touch templates/my_app/index.html

36. From here we want to start saving our work to a Github repository. The first thing we 
    should do is generate a .gitignore file. Since we're working with vscode, we need to
    install the extension for vscode. To do that open the vscode extentions tab using the 
    shortcut:
        CTRL + SHIFT + X

37. Then search for '.gitignore Generator'.

38. Hit the 'install' button.

39. We then want to use the extension to do that let's open the command palette using:
    CTRL + SHIFT + P

40. Search for 'Generate .gitignore file'. 

41. 'windows' and 'vscode' are selected by default. Don't deselect them. This makes sure
    that the .gitignore file doesn't include any unneccesary files.

42. Search 'python' and select it. Then create the .gitignore file.

43. Let's then create a new Github repository on our github account and give it the name
    of our app.

44. Then head back to our bash shell and run:
        git init -b main
    This initializes our local directory as a Git repository.
    Alternatively we could also use the built in git initializer that comes with vs code.
    To use it, click the Git icon on the left side bar and click 'Initilize Git Repository'
    which produces the same results.

45. We then need to add the files in our local repository then stage them for the first commit.
    To do this use:
        git add .
    This adds the files in the local repository and stages them for commit. To unstage a file,
    use 'git reset HEAD YOUR-FILE'.
    To do this through vscode, simply go to the git sidebar and click the add icon next to 
    the files you want to stage.

46. Then we need to commit the tracked changes and prepare them to be pushed to a remote 
    repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1'
    and commit and add the file again.
        git commit -m "First commit"
    In the vscode, you can click the checkmark to commit your files.

47. When creating a new repository on github you are given a url for the repository. Copy
    that url and paste it in this next command:
        git remote add origin https://github.com/RussPalms/rPalms_List.git
    This sets the new remote.

48. To verify the remote url execute:
        git remote -v

49. Push the changes in your local repository to Github
        git push origin main
    We can now check our repository on GitHub to see that our local repositories are not synced

50. If you didn't add a readme.md (.md files are 'markdown' files) you can create one using:
        touch README.md

51. We'll then go ahead and create some frontend and start by coding up our base.html file.

52. In the html file we added premade stylesheets by linking libraries from the internet.

53. Then we will start creating the navigation bar.

54. Then we can add the icons from materialize.

55. Create a new file in the templates/my_app directory and call it new_search:
        touch templates/my_app/new_search.html
    This html file represents the page that is directed to when using the search function.

56. At this point we can start working on our web scraping. We can first start by installing 
    beautiful soup using pip:
        pip install bs4
    
57. We can then import the module in our views file.

58. Let's also install our the requests library:
        pip install requests

59. Then we can also import that in the views file

60. Let's then gather all our dependencies and place them in a text file:
        pip freeze > requirements.txt

61. We then go to the views file and use beautifulsoup to parse the html that we get 
    from a user's search

62. After parsing the html we can go back into the style.css file that we created earlier
    and fix the format of the listings.

63. After all is fixed we can start hosting our app on the internet. We will be using 
    Heroku for this. To start, we need to create our Procfile:
        touch Procfile

64. Install the django_heroku library:
        pip install django-heroku

65. Then go to the settings file to import the django_heroku library.

66. Install the gunicorn library:
        pip install gunicorn

67. We'll then go ahead and retrieve our dependencies again:
        pip freeze > requirements.txt

68. Download/install Heroku:
        https://devcenter.heroku.com/articles/heroku-cli#download-and-install

68. Then log into Heroku:
        heroku login

69. Then create a new app:
        heroku create

70. Create a new postgres database for your app:
        heroku addons:create heroku-postgresql:hobby-dev

71. Stage the app:
        git add .

72. Commit:
        git commit -m "Ready to heroku this bitch"

73. Push to heroku:
        git push heroku main

71. Then make your makemigrations:
        heroku run python manage.py makemigrations

72. Run the migrations:
        heroku run python manage.py migrate